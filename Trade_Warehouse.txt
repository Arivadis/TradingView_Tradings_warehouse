
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Arivadis

//@version=5
indicator("Trade Warehouse", overlay = true, max_bars_back = 400)

var current_pair = syminfo.ticker
var dust = 5 / close

type Trade
    string pair
    float price
    float amount
    int date
    bool buy


var trades_array = array.new<Trade>(0)
var pairs = array.new_string(0)

var avg_tot = array.new_float(0)
var amount_tot = array.new_float(0)
var usd_tot = array.new_float(0)

var avg_cur = array.new_float(0)
var amount_cur = array.new_float(0)
var usd_cur = array.new_float(0)

// Where  PAIR/PRICE/USDT/AMOUNT/TIMEBUY/IS_BUY
var bool_finished = false
if not bool_finished
    array.push(trades_array,Trade.new('EURUSDT', 1.0762, 514.74646,timestamp(syminfo.timezone, 2023, 08, 08, 11), false))
    array.push(trades_array,Trade.new('EURUSDT', 1.0762, 82.54454,timestamp(syminfo.timezone, 2023, 08, 08, 11), false))
    array.push(trades_array,Trade.new('EURUSDT', 1.085, 1341.928,timestamp(syminfo.timezone, 2023, 08, 06, 12), true))
    array.push(trades_array,Trade.new('EURUSDT', 1.0854, 1524.87846,timestamp(syminfo.timezone, 2023, 08, 06, 12), true))
    array.push(trades_array,Trade.new('DOGEUSDT', 0.08033, 48.35866,timestamp(syminfo.timezone, 2023, 07, 25, 17), false))
    array.push(trades_array,Trade.new('SFPUSDT', 0.4744, 52.184,timestamp(syminfo.timezone, 2023, 07, 13, 18), true))
    array.push(trades_array,Trade.new('SFPUSDT', 0.4745, 196.9175,timestamp(syminfo.timezone, 2023, 07, 13, 18), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.3223, 136.84858,timestamp(syminfo.timezone, 2023, 07, 13, 18), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.3223, 27.91118,timestamp(syminfo.timezone, 2023, 07, 13, 18), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.3224, 20.21448,timestamp(syminfo.timezone, 2023, 07, 13, 18), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.091, 282.59082,timestamp(syminfo.timezone, 2023, 07, 13, 18), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.091, 67.88202,timestamp(syminfo.timezone, 2023, 07, 13, 18), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1201, 19.0959,timestamp(syminfo.timezone, 2023, 07, 09, 20), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1201, 198.0449,timestamp(syminfo.timezone, 2023, 07, 09, 20), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1201, 198.0449,timestamp(syminfo.timezone, 2023, 07, 09, 20), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1201, 55.7264,timestamp(syminfo.timezone, 2023, 07, 09, 20), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.3086, 185.74634,timestamp(syminfo.timezone, 2023, 07, 01, 20), false))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1308, 24.9828,timestamp(syminfo.timezone, 2023, 07, 01, 18), false))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1308, 71.94,timestamp(syminfo.timezone, 2023, 07, 01, 18), false))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1308, 315.6204,timestamp(syminfo.timezone, 2023, 07, 01, 18), false))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1308, 58.86,timestamp(syminfo.timezone, 2023, 07, 01, 18), false))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.05, 115.143,timestamp(syminfo.timezone, 2023, 07, 01, 18), false))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.05, 76.083,timestamp(syminfo.timezone, 2023, 07, 01, 18), false))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.05, 93.9855,timestamp(syminfo.timezone, 2023, 07, 01, 18), false))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.05, 19.8765,timestamp(syminfo.timezone, 2023, 07, 01, 18), false))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.05, 25.0425,timestamp(syminfo.timezone, 2023, 07, 01, 18), false))
    array.push(trades_array,Trade.new('MKRUSDT', 736.0, 22.6688,timestamp(syminfo.timezone, 2023, 06, 21, 08), false))
    array.push(trades_array,Trade.new('EURUSDT', 1.0893, 774.81909,timestamp(syminfo.timezone, 2023, 06, 20, 00), false))
    array.push(trades_array,Trade.new('SFPUSDT', 0.425, 249.9,timestamp(syminfo.timezone, 2023, 06, 17, 15), false))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1154, 24.9264,timestamp(syminfo.timezone, 2023, 06, 10, 12), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 0.879, 25.03392,timestamp(syminfo.timezone, 2023, 06, 10, 12), true))
    array.push(trades_array,Trade.new('EURUSDT', 1.069, 761.128,timestamp(syminfo.timezone, 2023, 06, 08, 11), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1371, 50.0415,timestamp(syminfo.timezone, 2023, 06, 06, 06), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.183, 50.05273,timestamp(syminfo.timezone, 2023, 06, 05, 15), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1467, 443.9142,timestamp(syminfo.timezone, 2023, 06, 05, 15), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.154, 240.086,timestamp(syminfo.timezone, 2023, 05, 31, 10), false))
    array.push(trades_array,Trade.new('CHRUSDT', 0.154, 203.896,timestamp(syminfo.timezone, 2023, 05, 31, 10), false))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1304, 19.9512,timestamp(syminfo.timezone, 2023, 05, 10, 06), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.3411, 11.29041,timestamp(syminfo.timezone, 2023, 05, 09, 20), true))
    array.push(trades_array,Trade.new('FIOUSDT', 0.02732, 10.49088,timestamp(syminfo.timezone, 2023, 05, 09, 16), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.303, 19.97499,timestamp(syminfo.timezone, 2023, 05, 09, 16), true))
    array.push(trades_array,Trade.new('SFPUSDT', 0.409, 10.634,timestamp(syminfo.timezone, 2023, 05, 09, 08), true))
    array.push(trades_array,Trade.new('FIOUSDT', 0.02771, 6.12391,timestamp(syminfo.timezone, 2023, 05, 08, 18), true))
    array.push(trades_array,Trade.new('FIOUSDT', 0.02771, 18.87051,timestamp(syminfo.timezone, 2023, 05, 08, 18), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.3459, 20.85777,timestamp(syminfo.timezone, 2023, 05, 08, 07), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.3459, 29.12478,timestamp(syminfo.timezone, 2023, 05, 08, 07), true))
    array.push(trades_array,Trade.new('SFPUSDT', 0.4186, 49.8134,timestamp(syminfo.timezone, 2023, 05, 08, 07), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.353, 49.95276,timestamp(syminfo.timezone, 2023, 05, 08, 07), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1363, 49.8858,timestamp(syminfo.timezone, 2023, 05, 08, 07), true))
    array.push(trades_array,Trade.new('FIOUSDT', 0.02978, 10.98882,timestamp(syminfo.timezone, 2023, 05, 06, 14), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.438, 26.97688,timestamp(syminfo.timezone, 2023, 05, 06, 14), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.438, 2.99104,timestamp(syminfo.timezone, 2023, 05, 06, 14), true))
    array.push(trades_array,Trade.new('SFPUSDT', 0.4263, 10.6575,timestamp(syminfo.timezone, 2023, 05, 06, 14), true))
    array.push(trades_array,Trade.new('CVXUSDT', 5.144, 10.00508,timestamp(syminfo.timezone, 2023, 05, 06, 14), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.3682, 29.97148,timestamp(syminfo.timezone, 2023, 05, 06, 14), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.146, 29.93,timestamp(syminfo.timezone, 2023, 05, 06, 14), true))
    array.push(trades_array,Trade.new('CVXUSDT', 5.265, 4.08564,timestamp(syminfo.timezone, 2023, 04, 30, 18), false))
    array.push(trades_array,Trade.new('CVXUSDT', 5.265, 163.757295,timestamp(syminfo.timezone, 2023, 04, 30, 18), false))
    array.push(trades_array,Trade.new('CVXUSDT', 5.266, 128.4904,timestamp(syminfo.timezone, 2023, 04, 30, 18), false))
    array.push(trades_array,Trade.new('CVXUSDT', 5.274, 52.734726,timestamp(syminfo.timezone, 2023, 04, 30, 18), true))
    array.push(trades_array,Trade.new('CVXUSDT', 5.271, 87.799047,timestamp(syminfo.timezone, 2023, 04, 30, 18), true))
    array.push(trades_array,Trade.new('CVXUSDT', 5.27, 93.53196,timestamp(syminfo.timezone, 2023, 04, 30, 18), true))
    array.push(trades_array,Trade.new('CVXUSDT', 5.274, 42.93036,timestamp(syminfo.timezone, 2023, 04, 30, 18), true))
    array.push(trades_array,Trade.new('CVXUSDT', 5.275, 22.999,timestamp(syminfo.timezone, 2023, 04, 30, 18), true))
    array.push(trades_array,Trade.new('FIOUSDT', 0.034, 49.98,timestamp(syminfo.timezone, 2023, 04, 26, 12), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.667, 49.92665,timestamp(syminfo.timezone, 2023, 04, 26, 12), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1639, 49.9895,timestamp(syminfo.timezone, 2023, 04, 26, 12), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.4103, 49.97454,timestamp(syminfo.timezone, 2023, 04, 26, 12), true))
    array.push(trades_array,Trade.new('DOGEUSDT', 0.08278, 49.91634,timestamp(syminfo.timezone, 2023, 04, 26, 12), true))
    array.push(trades_array,Trade.new('SFPUSDT', 0.4595, 49.626,timestamp(syminfo.timezone, 2023, 04, 26, 12), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.45, 10.991,timestamp(syminfo.timezone, 2023, 04, 23, 18), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.152, 10.944,timestamp(syminfo.timezone, 2023, 04, 21, 22), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.3775, 10.98525,timestamp(syminfo.timezone, 2023, 04, 21, 20), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.503, 10.98693,timestamp(syminfo.timezone, 2023, 04, 21, 20), true))
    array.push(trades_array,Trade.new('SFPUSDT', 0.425, 10.625,timestamp(syminfo.timezone, 2023, 04, 21, 19), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.3869, 10.98796,timestamp(syminfo.timezone, 2023, 04, 21, 19), true))
    array.push(trades_array,Trade.new('SFPUSDT', 0.435, 10.875,timestamp(syminfo.timezone, 2023, 04, 21, 19), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.555, 10.99385,timestamp(syminfo.timezone, 2023, 04, 21, 19), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1579, 10.8951,timestamp(syminfo.timezone, 2023, 04, 21, 17), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.619, 10.99301,timestamp(syminfo.timezone, 2023, 04, 20, 19), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.641, 10.9947,timestamp(syminfo.timezone, 2023, 04, 20, 17), true))
    array.push(trades_array,Trade.new('MKRUSDT', 697.0, 10.9429,timestamp(syminfo.timezone, 2023, 04, 20, 16), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.669, 10.99871,timestamp(syminfo.timezone, 2023, 04, 20, 16), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.3967, 10.98859,timestamp(syminfo.timezone, 2023, 04, 20, 16), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1635, 10.9545,timestamp(syminfo.timezone, 2023, 04, 20, 16), true))
    array.push(trades_array,Trade.new('SFPUSDT', 0.445, 10.68,timestamp(syminfo.timezone, 2023, 04, 20, 16), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.69, 10.985,timestamp(syminfo.timezone, 2023, 04, 20, 16), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.715, 10.99315,timestamp(syminfo.timezone, 2023, 04, 20, 15), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.839, 51.58395,timestamp(syminfo.timezone, 2023, 04, 20, 07), false))
    array.push(trades_array,Trade.new('SFPUSDT', 0.455, 10.465,timestamp(syminfo.timezone, 2023, 04, 19, 23), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.4075, 10.96175,timestamp(syminfo.timezone, 2023, 04, 19, 23), true))
    array.push(trades_array,Trade.new('MKRUSDT', 720.0, 10.944,timestamp(syminfo.timezone, 2023, 04, 19, 17), true))
    array.push(trades_array,Trade.new('SFPUSDT', 0.4651, 10.6973,timestamp(syminfo.timezone, 2023, 04, 19, 17), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1691, 10.9915,timestamp(syminfo.timezone, 2023, 04, 19, 10), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.782, 49.9851,timestamp(syminfo.timezone, 2023, 04, 19, 08), true))
    array.push(trades_array,Trade.new('SFPUSDT', 0.5156, 10.8276,timestamp(syminfo.timezone, 2023, 04, 18, 12), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.457, 49.9958,timestamp(syminfo.timezone, 2023, 04, 18, 12), true))
    array.push(trades_array,Trade.new('FIOUSDT', 0.03696, 10.97712,timestamp(syminfo.timezone, 2023, 04, 18, 12), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1884, 49.7376,timestamp(syminfo.timezone, 2023, 04, 18, 12), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.523, 23.46943,timestamp(syminfo.timezone, 2023, 03, 29, 13), false))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.523, 82.77505,timestamp(syminfo.timezone, 2023, 03, 29, 13), false))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.4, 49.994,timestamp(syminfo.timezone, 2023, 03, 27, 15), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.466, 49.9173,timestamp(syminfo.timezone, 2023, 03, 27, 13), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.553, 0.6212,timestamp(syminfo.timezone, 2023, 03, 24, 16), false))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.553, 52.36716,timestamp(syminfo.timezone, 2023, 03, 24, 16), false))
    array.push(trades_array,Trade.new('ENJUSDT', 0.3898, 51.53156,timestamp(syminfo.timezone, 2023, 03, 24, 16), false))
    array.push(trades_array,Trade.new('SFPUSDT', 0.4425, 4.8675,timestamp(syminfo.timezone, 2023, 03, 24, 16), false))
    array.push(trades_array,Trade.new('SFPUSDT', 0.4425, 1.3275,timestamp(syminfo.timezone, 2023, 03, 24, 16), false))
    array.push(trades_array,Trade.new('SFPUSDT', 0.4426, 46.0304,timestamp(syminfo.timezone, 2023, 03, 24, 16), false))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1672, 6.3536,timestamp(syminfo.timezone, 2023, 03, 23, 23), false))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1672, 16.72,timestamp(syminfo.timezone, 2023, 03, 23, 23), false))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1672, 33.44,timestamp(syminfo.timezone, 2023, 03, 23, 23), false))
    array.push(trades_array,Trade.new('SFPUSDT', 0.4234, 49.9612,timestamp(syminfo.timezone, 2023, 03, 22, 20), true))
    array.push(trades_array,Trade.new('ENJUSDT', 0.378, 49.9716,timestamp(syminfo.timezone, 2023, 03, 22, 20), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1477, 49.9226,timestamp(syminfo.timezone, 2023, 03, 22, 20), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.465, 49.9858,timestamp(syminfo.timezone, 2023, 03, 22, 20), true))
    array.push(trades_array,Trade.new('EURUSDT', 1.076, 1008.1044,timestamp(syminfo.timezone, 2023, 03, 22, 20), false))
    array.push(trades_array,Trade.new('XRPUSDT', 0.3663, 41.3919,timestamp(syminfo.timezone, 2023, 03, 14, 09), false))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1518, 52.5228,timestamp(syminfo.timezone, 2023, 03, 14, 09), false))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.528, 52.1048,timestamp(syminfo.timezone, 2023, 03, 14, 09), false))
    array.push(trades_array,Trade.new('EURUSDT', 1.0667, 1000.45793,timestamp(syminfo.timezone, 2023, 03, 13, 15), true))
    array.push(trades_array,Trade.new('XRPUSDT', 0.3627, 40.9851,timestamp(syminfo.timezone, 2023, 03, 10, 11), true))
    array.push(trades_array,Trade.new('CHRUSDT', 0.1444, 49.9624,timestamp(syminfo.timezone, 2023, 03, 09, 13), true))
    array.push(trades_array,Trade.new('ALICEUSDT', 1.466, 49.9906,timestamp(syminfo.timezone, 2023, 03, 09, 13), true))

bool_finished := true

if array.size(trades_array) > 0
    for i = array.size(trades_array) - 1 to 0
        current_trade = array.get(trades_array, i)
        if current_trade.date < time
            if not array.includes(pairs, current_trade.pair)
                array.push(pairs, current_trade.pair)

                array.push(amount_tot, current_trade.amount)
                array.push(usd_tot, current_trade.amount * current_trade.price)
                array.push(avg_tot, current_trade.price)

                array.push(amount_cur, current_trade.amount)
                array.push(usd_cur, current_trade.amount * current_trade.price)
                array.push(avg_cur, current_trade.price)

                
            else
                index_of_pair = array.indexof(pairs, current_trade.pair)
                temp_amount_tot = array.get(amount_tot, index_of_pair)
                temp_usd_tot = array.get(usd_tot, index_of_pair)
                temp_amount_cur = array.get(amount_cur, index_of_pair)
                temp_usd_cur = array.get(usd_cur, index_of_pair)

                if current_trade.buy
                    
                    array.set(amount_tot, index_of_pair, current_trade.amount + temp_amount_tot)
                    array.set(usd_tot, index_of_pair, (current_trade.amount * current_trade.price) + temp_usd_tot)
                    array.set(avg_tot, index_of_pair, temp_usd_tot /  temp_amount_tot)
                    
                    array.set(amount_cur, index_of_pair, current_trade.amount + temp_amount_cur)
                    array.set(usd_cur, index_of_pair, (current_trade.amount * current_trade.price) + temp_usd_cur)
                    array.set(avg_cur,index_of_pair, temp_usd_cur / temp_amount_cur)
                else
                    array.set(amount_tot, index_of_pair,temp_amount_tot - current_trade.amount)
                    array.set(usd_tot, index_of_pair, temp_usd_tot - (current_trade.amount * current_trade.price))
                    array.set(avg_tot, index_of_pair, temp_usd_tot /  temp_amount_tot)
                    
                    array.set(amount_cur, index_of_pair,temp_amount_cur - current_trade.amount)
                    array.set(usd_cur, index_of_pair, temp_usd_cur - (current_trade.amount * current_trade.price))
                    array.set(avg_cur,index_of_pair, temp_usd_cur /  temp_amount_cur)
                    if array.get(amount_cur, index_of_pair) < dust
                        array.set(amount_cur, index_of_pair, 0)
                        array.set(usd_cur, index_of_pair, 0)
                        array.set(avg_cur,index_of_pair, 0)

            array.remove(trades_array, i)
        else
            break




is_pair_in = array.includes(pairs, current_pair)

plot_curr_pair = is_pair_in ? array.get(avg_cur,array.indexof(pairs,current_pair)) : na
plot(plot_curr_pair, "AVG price of current pair", color = color.rgb(28, 95, 63), style = plot.style_linebr)
plot_curr_pair_total = is_pair_in ? array.get(avg_tot,array.indexof(pairs,current_pair)) : na
plot(plot_curr_pair_total, "AVG price of current pair", color = color.rgb(148, 233, 192), style = plot.style_linebr)


var unic_pairs = array.new_string()
if array.size(unic_pairs) == 0
    for i = array.size(trades_array) - 1 to 0
        current_trade = array.get(trades_array, i)
        if not array.includes(unic_pairs, current_trade.pair)
            array.push(unic_pairs, current_trade.pair)
var pairs_array_le = array.size(unic_pairs)
var testTable = table.new(position = position.bottom_right, columns = 7, rows = pairs_array_le + 1, bgcolor = color.yellow, border_width = 0,frame_width = 0)

if barstate.isconfirmed and array.size(avg_tot) > 0
    total_USDT_invested = 0.0
    total_USDT_invested_curr = 0.0
    cur_pair_profit = 0.0
    cur_pair_profit_curr = 0.0
    for i = 0 to array.size(pairs) - 1
        pair_now = array.get(pairs, i)

        avg_now = array.get(avg_tot, i)
        tot_amount_now = array.get(amount_tot, i)
        tot_amount_now_usdt = array.get(usd_tot, i)
        total_USDT_invested += tot_amount_now_usdt

        avg_now_cur = array.get(avg_cur, i)
        amount_now_cur = array.get(amount_cur, i)
        amount_now_usdt_cur = array.get(usd_cur, i)
        total_USDT_invested_curr += amount_now_usdt_cur

        if pair_now == current_pair
            cur_pair_profit := tot_amount_now_usdt - tot_amount_now * close
            cur_pair_profit_curr := amount_now_usdt_cur - amount_now_cur * close
        table.cell(table_id = testTable, column = 0, row = i, text = pair_now, bgcolor=color.teal)
        table.cell(table_id = testTable, column = 1, row = i, text = "Invested AVG price =>" + str.tostring(avg_now))
        table.cell(table_id = testTable, column = 2, row = i, text = "Invested amount =>" + str.tostring(tot_amount_now))
        table.cell(table_id = testTable, column = 3, row = i, text = "Invested USDT =>" + str.tostring(math.round(tot_amount_now_usdt, 2)))
        table.cell(table_id = testTable, column = 4, row = i, text = "Curr AVG price =>" + str.tostring(avg_now_cur))
        table.cell(table_id = testTable, column = 5, row = i, text = "Curr amount =>" + str.tostring(amount_now_cur))
        table.cell(table_id = testTable, column = 6, row = i, text = "Curr USDT =>" + str.tostring(math.round(amount_now_usdt_cur, 2)))

    table.cell(table_id = testTable, column = 0, row = pairs_array_le, text = 'Total and invested =>'  , bgcolor=color.teal)
    table.cell(table_id = testTable, column = 1, row = pairs_array_le, text = str.tostring(math.round(total_USDT_invested, 2)))
    table.cell(table_id = testTable, column = 2, row = pairs_array_le, text = str.format("Total curr {0} profit + not closed =>", current_pair), bgcolor=color.teal)
    table.cell(table_id = testTable, column = 3, row = pairs_array_le, text =  str.tostring(math.round(cur_pair_profit * -1)))
    table.cell(table_id = testTable, column = 4, row = pairs_array_le, text = str.tostring(math.round(total_USDT_invested_curr, 2)))
    table.cell(table_id = testTable, column = 5, row = pairs_array_le, text = str.format("Current {0} profit + not closed =>", current_pair), bgcolor=color.teal)
    table.cell(table_id = testTable, column = 6, row = pairs_array_le, text =  str.tostring(math.round(cur_pair_profit_curr * -1)))



